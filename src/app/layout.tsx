import type { Metadata } from "next";
import { Geist, Geist_Mono } from "next/font/google";
import "./globals.css";
import { NextAuthProvider } from "./providers";

const geistSans = Geist({
  variable: "--font-geist-sans",
  subsets: ["latin"],
});

const geistMono = Geist_Mono({
  variable: "--font-geist-mono",
  subsets: ["latin"],
});

export const metadata: Metadata = {
  title: "Create Next App",
  description: "Generated by create next app",
};

// Hydration Fix Component for browser extensions
function HydrationFix() {
  return (
    <script
      dangerouslySetInnerHTML={{
        __html: `
          // Remove browser extension attributes before hydration
          if (typeof window !== 'undefined') {
            // Remove ColorZilla attributes
            if (document.body.hasAttribute('cz-shortcut-listen')) {
              document.body.removeAttribute('cz-shortcut-listen');
            }
            
            // Remove other common extension attributes
            ['data-new-gr-c-s-check-loaded', 'data-gr-ext-installed', 'data-new-gr-c-s-loaded'].forEach(attr => {
              if (document.body.hasAttribute(attr)) {
                document.body.removeAttribute(attr);
              }
            });

            // MutationObserver to prevent re-addition
            const observer = new MutationObserver((mutations) => {
              mutations.forEach((mutation) => {
                if (mutation.type === 'attributes' && 
                    ['cz-shortcut-listen', 'data-new-gr-c-s-check-loaded', 'data-gr-ext-installed'].includes(mutation.attributeName)) {
                  document.body.removeAttribute(mutation.attributeName);
                }
              });
            });
            
            observer.observe(document.body, {
              attributes: true,
              attributeFilter: ['cz-shortcut-listen', 'data-new-gr-c-s-check-loaded', 'data-gr-ext-installed']
            });
          }
        `,
      }}
    />
  );
}

export default function RootLayout({
  children,
}: Readonly<{
  children: React.ReactNode;
}>) {
  return (
    <html lang="en">
      <head>
        <HydrationFix />
      </head>
      <body
        className={`${geistSans.variable} ${geistMono.variable} antialiased`}
        suppressHydrationWarning={true}
      >
        <NextAuthProvider>{children}</NextAuthProvider>
      </body>
    </html>
  );
}
